For the purpose of testing the various data structures and their efficiency, I used System.time before and after a function.
I tested exclusively the insertion and finding functions, as I felt deletion was a little redundant since finding accomplishes that already,
just without the actual removal. To test the find function, I divided the total storage structure size by 10 and searched for random variables
that many times. For example, most of these structures were 50,000 in size, so I searched 5,000 times for 5,000 different random variables. 
I recorded the time prior to the first search and stopped it after the end of the last search to get my measurement. 

For the trails, I narrowed down the data structure to use for storage between a TreeSet and a TreeMap. I decided against anything Hash,
such as a HashTable, because I wanted the size to be dynamic and avoid having to declare it prior. Others, such as a queue, linked list, etc.
just make no sense to me and are wildly inefficient for this. As for the data finds, I found that when inserting 50,000 objects, the TreeSet
was slightly faster than the TreeMap, but it was a very miniscule difference. The larger difference was with my find method, with TreeSet
winning out vastly compared to TreeMap. Perhaps it's the nature of the Trail class, or maybe how I wrote the methods, but regardless
finding with the TreeSet was extremely fast compared to the TreeMap for trails, making TreeSet my go to choice.

For the users, I again narrowed down between a TreeSet and TreeMap for storage. I decided upon this for exactly the same reasons as I did
the trail. Again, for insertion both data structures were neck and neck with 50,000 objects, with treeMap interestingly enough winning out 
slightly this time. Conversely though, the find times were basically reversed from the trail tests, with user being vastly more efficient
in finding in a TreeMap. Perhaps it's how the classes are different, but the searching methods were essentially the same, barring some
variable changes, but TreeMap seems the best for user.  

For the Hiking History, there is only one obvious choice to me, so I tested a linkedList. I didn't compare it to other data structures,
as I feel this is genuinely the only option that works for the requirements of the projects. It's dynamic in size, maintains insertion order,
has the ability to insert, find, and delete, and is efficient. While queues and stacks could possibly get the job done, they're much less
suitable for all the extra things a LinkedList can do and are lacking. I tested insertion and finding again, both seemed reasonable. 

Ultimately, I plan on going with a TreeSet for my Trail storage, a TreeMap for my user Storage, and a LinkedList for my Hiking History.
The TreeSet doesn't allow duplicates, but there never should be as all trails are unique. The TreeMap is good as it bounds a key to the value,
which could be useful when setting up usernames and passwords. The LinkedList will maintain the order and allow things to be added or removed
in specific spots from the user's history. For the TreeSet and TreeMap, their efficiency is Big O(log n) for both finding and insertion,
which is very good. For the LinkedList, insertion and deletion are Big O(1), but finding is unfortunately big O(n). Not the best, but 
it still is the best fit.

